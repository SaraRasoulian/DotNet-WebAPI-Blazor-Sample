@page "/students/delete/{studentId}"
@inject NavigationManager NavigationManager
@inject StudentService studentService
@inject IJSRuntime JsRuntime

<PageTitle>Delete Student</PageTitle>
@if (student is not null)
{
    <div class="content-container">
        <div class="view-wrapper">
            <div class="title-wrapper">
                <NavLink href="/students" class="back-to-list-wrapper" data-toggle="tooltip"
                         data-placement="top" title="Return to list">
                    <div class="back-to-list">
                        <img src="images/back.png" class="back-icon" alt="" />
                    </div>
                </NavLink>
                <h4>Delete Student</h4>
            </div>
            <hr class="line" />

            <div class="content">
                <div class="form-container">
                    <div>
                        <div class="row g-3">
                            <div class="col-lg-8 col-md-12 col-sm-12">
                                <div class="view-item-wrapper">
                                    <span>First Name</span>
                                    <p>@student.FirstName</p>
                                </div>
                            </div>
                        </div>

                        <div class="row g-3">
                            <div class="col-lg-8 col-md-12 col-sm-12">
                                <div class="view-item-wrapper">
                                    <span>Last Name</span>
                                    <p>@student.LastName</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row g-3">
                            <div class="col-lg-8 col-md-12 col-sm-12">
                                <div class="view-item-wrapper">
                                    <span>Email</span>
                                    <p>@student.Email.Value</p>
                                </div>
                            </div>
                        </div>

                        <div class="row g-3">
                            <div class="col-lg-8 col-md-12 col-sm-12">
                                <div class="view-item-wrapper">
                                    <span>Birth Date</span>
                                    <p>@student.BirthDate</p>
                                </div>
                            </div>
                        </div>


                        <div class="row g-3">
                            <div class="col-lg-8 col-md-12 col-sm-12">
                                <div class="view-item-wrapper">
                                    <span>GitHub Username</span>
                                    <p>@student.GitHubUsername</p>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-6 col-md-8 col-sm-12 col-xs-12">
                                <div class="button-container">
                                    <button class="btn btn-delete" type="submit" @onclick="DeleteStudent">Delete</button>
                                    <NavLink href="/students" class="btn btn-cancel">Cancel</NavLink>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

        </div>
    </div>
}
else
{
    <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Secondary" />
}

@code {
    private StudentDto student;

    [Parameter]
    public string studentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        student = await studentService.Get(studentId);
    }

    private async void DeleteStudent()
    {
        var response = await studentService.Delete(studentId);
        if (response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Student deleted!");
            NavigationManager.NavigateTo("/students");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong!");
        }
    }
}